---
import { Icon } from "astro-icon/components";
import { museumBaseUrl } from "@/lib/constants";
import { getMode } from "@/lib/mode";

interface Props {
  mode?: "fixed";
}

const { mode = getMode() } = Astro.props;

/** @breaklocation Home & Search */

/**
 * @break
 * wcag2: 2.4.2
 * wcag3: Title
 * description: The search result page title is not accurate.
 */
/**
 * @break
 * wcag3: Notification of change
 * description: No programmatic notification occurs when the content changes
 */
/**
 * @break
 * wcag2: 3.2.2
 * description: |
 *   The search box automatically performs the search and changes to the search page
 *   on a delay after input stops. No warning or instructions are provided.
 */
/**
 * @break
 * wcag2: 3.3.1
 * wcag3: Error identification
 * description: Empty search results and misspellings do not throw an error.
 * discussionItems:
 *   - Do others agree with this failure?
 */
---

{
  /**
   * @break
   * wcag2: 1.3.5
   * wcag3: Input labels
   * description: The search field has no label.
   */
  /**
   * @break
   * wcag2: 4.1.2
   * description: There is no search landmark or label indicating the presence or purpose of the search box.
   */
  /**
   * @break
   * wcag3: Name, role, value, state
   * description: There is no search landmark indicating the presence or purpose of the search box and no label on the search field.
   * discussionItems:
   *   - The Read More and Explore link text does not provide enough information to know which links go where - does this fail this requirement?
   */
  mode === "broken" ? (
    <input id="search" placeholder="Search" />
  ) : (
    <form slot="fixed" role="search" action={`${museumBaseUrl}search/`}>
      <label for="search">Search</label>
      <input id="search" type="search" name="query" />
      <button class="outline">
        <Icon name="ri:search-line" />
        <span class="visually-hidden">Search</span>
      </button>
    </form>
  )
}

<script>
  import debounce from "lodash-es/debounce";
  import type { SearchResult } from "@/pages/museum/api/search";
  import { museumBaseUrl } from "@/lib/constants";
  import { fetchApi } from "@/lib/client/fetch";

  const response = await fetchApi(`${museumBaseUrl}api/search/`);
  const allResults = (await response.json()) as SearchResult[];

  const searchInput = document.getElementById("search") as HTMLInputElement;

  function search(query: string) {
    searchInput.value = query;
    const filteredResults = allResults.filter(({ title }) =>
      title.toLowerCase().includes(query.toLowerCase())
    );
    const resultsHtml = query
      ? `<ul>${filteredResults
          .map(({ title, url }) => `<li><a href="${url}">${title}</a></li>`)
          .join(" ")}</ul>`
      : "<p>No query specified.</p>";

    const mainEl = document.querySelector("main") as HTMLElement;
    mainEl.innerHTML = `
      <h1>Search Results</h1>
      ${resultsHtml}
    `;
  }

  // Perform search immediately when loading this component on search page
  const url = new URL(location.href);
  if (url.pathname === `${museumBaseUrl}search/`) {
    const query = url.searchParams.get("query") || "";
    search(query);
  }

  // Feature-detect broken state, since it's parameterized at build time
  const isBroken = !document.querySelector("form[role='search']");
  if (isBroken) {
    let currentUrl = new URL(location.href);
    window.addEventListener("popstate", () => {
      const url = new URL(location.href);
      const query = url.searchParams.get("query") || "";

      if (url.pathname === `${museumBaseUrl}search/`) search(query);
      // Perform full navigation when leaving search page, but ignore hash changes
      else if (url.pathname !== currentUrl.pathname) location.reload();
      currentUrl = url;
    });

    searchInput.addEventListener(
      "input",
      debounce(() => {
        const query = searchInput.value;

        if (location.pathname !== "/search")
          history.replaceState({}, "", location.href);
        // No-op if the value didn't change after debounced input events
        else if (query === new URL(location.href).searchParams.get("query"))
          return;

        history.pushState(
          {},
          "",
          `${museumBaseUrl}search/?query=${encodeURIComponent(query)}`
        );

        search(query);
      }, 500)
    );
  }
</script>

<style>
  form {
    display: flex;
    align-items: stretch;
    & button {
      padding: 0 calc(1rem * var(--ms-6));
      position: relative;
      inset-inline-start: -1px;
    }
  }

  input {
    padding: 0.45rem;
    width: 10rem;
  }

  label {
    align-self: center;
    margin-right: 1rem;
  }
</style>
