---
import { getCollection, render } from "astro:content";

export async function getStaticPaths() {
  const allProducts = await getCollection("products");

  return allProducts.map((product) => {
    const [category, productSlug] = product.id.split("/");
    return {
      params: { category, product: productSlug },
      props: { product },
    };
  });
}

import type { CollectionEntry } from "astro:content";
import { Icon } from "astro-icon/components";
import CoverImage from "@/components/CoverImage.astro";
import FixableRegion from "@/components/FixableRegion.astro";
import Modal from "@/components/Modal.astro";
import ShopLayout from "@/layouts/ShopLayout.astro";

interface Props {
  product: CollectionEntry<"products">;
  title: string;
}

const { product } = Astro.props;
const { Content } = await render(product);
---

<ShopLayout title={product.data.title}>
  <div class="container shop">
    <div class="image-container">
      <CoverImage
        src={product.data.image}
        alt={product.data.skipAlt ? null : product.data.imageDescription}
        objectPosition={product.data.imagePosition}
        widths={[960]}
      />
    </div>
    <div class="content">
      <h1>{product.data.title}</h1>
      <strong>${product.data.price}</strong>
      <form>
        <input type="hidden" name="name" value={product.data.title} />
        <input type="hidden" name="slug" value={product.id} />
        <input type="hidden" name="price" value={product.data.price} />
        <div class="quantity-controls">
          <label for="quantity">Quantity: </label>
          <FixableRegion>
            <button type="button" id="decrement"
              ><Icon name="ri:arrow-drop-down-line" /></button
            >
            <input
              id="quantity"
              type="tel"
              pattern="[0-9]*"
              name="quantity"
              value="1"
            />
            <button type="button" id="increment"
              ><Icon name="ri:arrow-drop-up-line" /></button
            >
            <input
              slot="fixed"
              id="quantity"
              type="number"
              name="quantity"
              value="1"
            />
          </FixableRegion>
        </div>
        <button>Add to cart</button>
      </form>
      <Content />
    </div>
  </div>
  <Modal id="modal-error" closeOnBackdrop closeOnKeyboard>
    <div class="modal-error">
      <Icon
        name="ri:error-warning-line"
        color="var(--red-warm-500)"
        size={128}
      />
      <p>Please enter a valid product quantity.</p>
      <button data-modal-close>OK</button>
    </div>
  </Modal>
</ShopLayout>

<script>
  import { showModal } from "@/lib/client/modal";
  import { persist, recall } from "@/lib/client/store";

  const form = document.querySelector("main form") as HTMLFormElement;
  form.addEventListener("submit", (event) => {
    event.preventDefault();
    const quantity = +form.elements["quantity"].value;
    if (isNaN(quantity) || quantity < 1) {
      showModal("modal-error");
      return;
    }

    const name = form.elements["name"].value;
    const slug = form.elements["slug"].value;
    const price = +form.elements["price"].value;

    const cart = recall("cart");
    if (cart[slug]) cart[slug].quantity += quantity;
    else cart[slug] = { name, price, quantity };
    persist("cart", cart);
  });

  document.getElementById("increment")?.addEventListener("click", () => {
    const value = +form.elements["quantity"].value;
    form.elements["quantity"].value = value + 1;
  });

  document.getElementById("decrement")?.addEventListener("click", () => {
    const value = +form.elements["quantity"].value;
    form.elements["quantity"].value = Math.max(value - 1, 1);
  });
</script>

<style>
  h1 {
    margin-top: 0;
  }

  strong {
    font-size: calc(1rem * var(--ms3));
  }

  .container {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  @media (min-width: 60em) {
    .container {
      flex-direction: row;
    }

    .image-container,
    .content {
      width: 50%;
    }
  }

  .image-container {
    display: flex;
    align-items: flex-start;

    & img {
      max-width: 100%;
    }
  }

  .content {
    & form,
    & button:not([type]) {
      margin: 1rem 0;
    }

    & button:not([type]) {
      display: block;
    }

    & button:has(svg) {
      padding: 2px;

      & svg {
        height: 1.5rem;
        width: 1.5rem;
      }

      &:focus {
        outline: none; /* specifically affects broken case */
      }
    }

    & input {
      text-align: center;
      width: 3rem;
    }

    & label {
      padding-inline-end: 1rem;
    }
  }

  .quantity-controls {
    display: flex;
    align-items: center;
  }

  .modal-error {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
    text-align: center;
  }
</style>
