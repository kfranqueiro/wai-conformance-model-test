---
import { type CollectionEntry, getCollection, render } from "astro:content";
import CoverImage from "@/components/CoverImage.astro";
import Favorite from "@/components/Favorite.astro";
import Layout from "@/layouts/Layout.astro";
import { getEntry } from "astro:content";

export async function getStaticPaths() {
  const allExhibits = await getCollection("exhibits");

  return Promise.all(
    allExhibits.map(async (exhibit) => {
      const [categorySlug, exhibitSlug] = exhibit.id.split("/");
      return {
        params: { category: categorySlug, exhibit: exhibitSlug },
        props: {
          category: await getEntry("exhibit-categories", categorySlug),
          exhibit,
        },
      };
    })
  );
}

interface Props {
  category: CollectionEntry<"exhibit-categories">;
  exhibit: CollectionEntry<"exhibits">;
}

const { category, exhibit } = Astro.props;
const { Content } = await render(exhibit);
---

<Layout title={exhibit.data.title} withInsetMain={!category.data.dangerous}>
  {
    category.data.dangerous ? (
      <div
        class="dangerous"
        style={{ background: `url(${exhibit.data.image.src})` }}
      >
        <h1>{exhibit.data.title}</h1>
        <Content />
        <div class="favorite-container">
          <Favorite id={exhibit.id} />
        </div>
      </div>
    ) : (
      <>
        <h1>{exhibit.data.title}</h1>
        <div class="container">
          <div class="image-container">
            <CoverImage
              src={exhibit.data.image}
              alt={exhibit.data.skipAlt ? null : exhibit.data.imageDescription}
              objectPosition={exhibit.data.imagePosition}
              widths={[960]}
            />
            <div class="favorite-container">
              <Favorite id={exhibit.id} />
            </div>
          </div>
          <div class="content">
            <Content />
          </div>
        </div>
      </>
    )
  }
</Layout>

<script>
  import throttle from "lodash-es/throttle";
  import { getMode } from "@/lib/mode";

  const dangerousEl = document.querySelector(".dangerous");
  if (dangerousEl && getMode() === "broken") {
    const docEl = document.documentElement;
    const updateScroll = throttle(() => {
      const scrollPercentage =
        docEl.scrollTop / (docEl.scrollHeight - window.innerHeight);
      (dangerousEl as HTMLElement).style.backgroundPositionY =
        `${scrollPercentage * 100}%`;
    });

    window.addEventListener("resize", updateScroll);
    window.addEventListener("scroll", updateScroll);
  }
</script>

<style>
  h1 {
    text-align: center;
  }

  .container {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  @media (min-width: 60em) {
    .container {
      flex-direction: row;
    }

    .image-container,
    .content {
      width: 50%;
    }
  }

  .image-container {
    display: flex;
    align-items: flex-start;
    position: relative;

    & img {
      max-width: 100%;
    }
  }

  .dangerous {
    background: fixed center top / cover no-repeat;
    color: var(--white);
    padding: 1rem 10%;
    position: relative;

    &::before {
      background: linear-gradient(
        to right,
        rgba(0, 0, 0, 0.1) 0%,
        rgba(0, 0, 0, 0.7) 12%,
        rgba(0, 0, 0, 0.7) 88%,
        rgba(0, 0, 0, 0.1) 100%
      );
      position: absolute;
      inset: 0;
      content: "";
    }

    & h1 {
      margin: 0;
      text-align: left;
    }

    /* Global selector required because <Content /> doesn't get scoped */
    & :global(> *) {
      position: relative; /* force stacking context for z order */
    }
  }

  @media (min-width: 60em) {
    .dangerous {
      padding: 1rem 40% 1rem 10%;

      &::before {
        background: linear-gradient(
          to right,
          rgba(0, 0, 0, 0.1) 0%,
          rgba(0, 0, 0, 0.7) 8%,
          rgba(0, 0, 0, 0.7) 52%,
          rgba(0, 0, 0, 0.1) 75%
        );
      }
    }
  }

  .favorite-container {
    position: absolute;
    right: 1rem;
    top: 1rem;
  }

  .content :global(p:first-of-type) {
    margin-block-start: 0;
  }
</style>
